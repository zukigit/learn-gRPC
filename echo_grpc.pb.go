// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.6
// source: proto/echo.proto

package echo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	EchoService_Echo_FullMethodName              = "/echo.EchoService/Echo"
	EchoService_EchoStream_FullMethodName        = "/echo.EchoService/EchoStream"
	EchoService_ReverseEchoStream_FullMethodName = "/echo.EchoService/ReverseEchoStream"
	EchoService_BidirectionalEcho_FullMethodName = "/echo.EchoService/BidirectionalEcho"
)

// EchoServiceClient is the client API for EchoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EchoServiceClient interface {
	// Unary RPC
	Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error)
	// Server streaming RPC
	EchoStream(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (EchoService_EchoStreamClient, error)
	// Client streaming RPC
	ReverseEchoStream(ctx context.Context, opts ...grpc.CallOption) (EchoService_ReverseEchoStreamClient, error)
	// Bidirectional streaming RPC
	BidirectionalEcho(ctx context.Context, opts ...grpc.CallOption) (EchoService_BidirectionalEchoClient, error)
}

type echoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEchoServiceClient(cc grpc.ClientConnInterface) EchoServiceClient {
	return &echoServiceClient{cc}
}

func (c *echoServiceClient) Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EchoResponse)
	err := c.cc.Invoke(ctx, EchoService_Echo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) EchoStream(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (EchoService_EchoStreamClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EchoService_ServiceDesc.Streams[0], EchoService_EchoStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &echoServiceEchoStreamClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EchoService_EchoStreamClient interface {
	Recv() (*EchoResponse, error)
	grpc.ClientStream
}

type echoServiceEchoStreamClient struct {
	grpc.ClientStream
}

func (x *echoServiceEchoStreamClient) Recv() (*EchoResponse, error) {
	m := new(EchoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *echoServiceClient) ReverseEchoStream(ctx context.Context, opts ...grpc.CallOption) (EchoService_ReverseEchoStreamClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EchoService_ServiceDesc.Streams[1], EchoService_ReverseEchoStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &echoServiceReverseEchoStreamClient{ClientStream: stream}
	return x, nil
}

type EchoService_ReverseEchoStreamClient interface {
	Send(*EchoRequest) error
	CloseAndRecv() (*EchoResponse, error)
	grpc.ClientStream
}

type echoServiceReverseEchoStreamClient struct {
	grpc.ClientStream
}

func (x *echoServiceReverseEchoStreamClient) Send(m *EchoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *echoServiceReverseEchoStreamClient) CloseAndRecv() (*EchoResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(EchoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *echoServiceClient) BidirectionalEcho(ctx context.Context, opts ...grpc.CallOption) (EchoService_BidirectionalEchoClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EchoService_ServiceDesc.Streams[2], EchoService_BidirectionalEcho_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &echoServiceBidirectionalEchoClient{ClientStream: stream}
	return x, nil
}

type EchoService_BidirectionalEchoClient interface {
	Send(*EchoRequest) error
	Recv() (*EchoResponse, error)
	grpc.ClientStream
}

type echoServiceBidirectionalEchoClient struct {
	grpc.ClientStream
}

func (x *echoServiceBidirectionalEchoClient) Send(m *EchoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *echoServiceBidirectionalEchoClient) Recv() (*EchoResponse, error) {
	m := new(EchoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EchoServiceServer is the server API for EchoService service.
// All implementations must embed UnimplementedEchoServiceServer
// for forward compatibility
type EchoServiceServer interface {
	// Unary RPC
	Echo(context.Context, *EchoRequest) (*EchoResponse, error)
	// Server streaming RPC
	EchoStream(*EchoRequest, EchoService_EchoStreamServer) error
	// Client streaming RPC
	ReverseEchoStream(EchoService_ReverseEchoStreamServer) error
	// Bidirectional streaming RPC
	BidirectionalEcho(EchoService_BidirectionalEchoServer) error
	mustEmbedUnimplementedEchoServiceServer()
}

// UnimplementedEchoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEchoServiceServer struct {
}

func (UnimplementedEchoServiceServer) Echo(context.Context, *EchoRequest) (*EchoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedEchoServiceServer) EchoStream(*EchoRequest, EchoService_EchoStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method EchoStream not implemented")
}
func (UnimplementedEchoServiceServer) ReverseEchoStream(EchoService_ReverseEchoStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ReverseEchoStream not implemented")
}
func (UnimplementedEchoServiceServer) BidirectionalEcho(EchoService_BidirectionalEchoServer) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalEcho not implemented")
}
func (UnimplementedEchoServiceServer) mustEmbedUnimplementedEchoServiceServer() {}

// UnsafeEchoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EchoServiceServer will
// result in compilation errors.
type UnsafeEchoServiceServer interface {
	mustEmbedUnimplementedEchoServiceServer()
}

func RegisterEchoServiceServer(s grpc.ServiceRegistrar, srv EchoServiceServer) {
	s.RegisterService(&EchoService_ServiceDesc, srv)
}

func _EchoService_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EchoService_Echo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).Echo(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_EchoStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EchoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EchoServiceServer).EchoStream(m, &echoServiceEchoStreamServer{ServerStream: stream})
}

type EchoService_EchoStreamServer interface {
	Send(*EchoResponse) error
	grpc.ServerStream
}

type echoServiceEchoStreamServer struct {
	grpc.ServerStream
}

func (x *echoServiceEchoStreamServer) Send(m *EchoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _EchoService_ReverseEchoStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EchoServiceServer).ReverseEchoStream(&echoServiceReverseEchoStreamServer{ServerStream: stream})
}

type EchoService_ReverseEchoStreamServer interface {
	SendAndClose(*EchoResponse) error
	Recv() (*EchoRequest, error)
	grpc.ServerStream
}

type echoServiceReverseEchoStreamServer struct {
	grpc.ServerStream
}

func (x *echoServiceReverseEchoStreamServer) SendAndClose(m *EchoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *echoServiceReverseEchoStreamServer) Recv() (*EchoRequest, error) {
	m := new(EchoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _EchoService_BidirectionalEcho_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EchoServiceServer).BidirectionalEcho(&echoServiceBidirectionalEchoServer{ServerStream: stream})
}

type EchoService_BidirectionalEchoServer interface {
	Send(*EchoResponse) error
	Recv() (*EchoRequest, error)
	grpc.ServerStream
}

type echoServiceBidirectionalEchoServer struct {
	grpc.ServerStream
}

func (x *echoServiceBidirectionalEchoServer) Send(m *EchoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *echoServiceBidirectionalEchoServer) Recv() (*EchoRequest, error) {
	m := new(EchoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EchoService_ServiceDesc is the grpc.ServiceDesc for EchoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EchoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "echo.EchoService",
	HandlerType: (*EchoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _EchoService_Echo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EchoStream",
			Handler:       _EchoService_EchoStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReverseEchoStream",
			Handler:       _EchoService_ReverseEchoStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BidirectionalEcho",
			Handler:       _EchoService_BidirectionalEcho_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/echo.proto",
}
